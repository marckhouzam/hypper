#!/usr/bin/env bash
# Copyright The Helm Authors, SUSE LLC
# Copyright (C) 2014-2016, Matt Butcher and Matt Farina
# Copyright (C) 2016, Hewlett Packard Enterprise Development LP
# Copyright (C) 2015, Google
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# The install script is based off of the MIT-licensed script from glide,
# the package manager for Go: https://github.com/Masterminds/glide.sh/blob/master/get

: "${BINARY_NAME:=hypper}"
: "${USE_SUDO:=true}"
: "${DEBUG:=false}"
: "${VERIFY_CHECKSUM:=true}"
: "${HYPPER_INSTALL_DIR:=/usr/local/bin}"


HAS_CURL="$(type "curl" &> /dev/null && echo true || echo false)"
HAS_WGET="$(type "wget" &> /dev/null && echo true || echo false)"
HAS_OPENSSL="$(type "openssl" &> /dev/null && echo true || echo false)"

# initArch discovers the architecture for this system.
initArch() {
  ARCH=$(uname -m)
  case $ARCH in
    armv5*) ARCH="armv5";;
    armv6*) ARCH="armv6";;
    armv7*) ARCH="arm";;
    aarch64) ARCH="arm64";;
    x86) ARCH="386";;
    x86_64) ARCH="x86_64";;
    i686) ARCH="386";;
    i386) ARCH="386";;
  esac
}

# initOS discovers the operating system for this system.
initOS() {
  OS=$(uname | tr '[:upper:]' '[:lower:]')

  case "$OS" in
    # Minimalist GNU for Windows
    mingw*) OS='windows';;
  esac
}

# runs the given command as root (detects if we are root already)
runAsRoot() {
  if [ $EUID -ne 0 ] && [ "$USE_SUDO" = "true" ]; then
    sudo "${@}"
  else
    "${@}"
  fi
}

# verifySupported checks that the os/arch combination is supported for
# binary builds, as well whether or not necessary tools are present.
verifySupported() {
  local supported="darwin-x86_64\ndarwin-arm64\nlinux-386\nlinux-x86_64\nlinux-arm\nlinux-arm64\nlinux-ppc64le\nlinux-s390x\nwindows-x86_64"
  if ! echo "${supported}" | grep -q "${OS}-${ARCH}"; then
    echo "No prebuilt binary for ${OS}-${ARCH}."
    echo "To build from source, go to https://github.com/rancher-sandbox/hypper"
    exit 1
  fi

  if [ "${HAS_CURL}" != "true" ] && [ "${HAS_WGET}" != "true" ]; then
    echo "Either curl or wget is required"
    exit 1
  fi

  if [ "${VERIFY_CHECKSUM}" == "true" ] && [ "${HAS_OPENSSL}" != "true" ]; then
    echo "In order to verify checksum, openssl must first be installed."
    echo "Please install openssl or set VERIFY_CHECKSUM=false in your environment."
    exit 1
  fi
}

# checkDesiredVersion checks if the desired version is available.
checkDesiredVersion() {
  if [ "$DESIRED_VERSION" == "" ]; then
    # Get tag from release URL
    local latest_release_url="https://api.github.com/repos/rancher-sandbox/hypper/releases/latest"
    if [ "${HAS_CURL}" == "true" ]; then
      TAG=$(curl -Ls $latest_release_url | grep tag_name | sed -E 's/.*"([^"]+)".*/\1/')
    elif [ "${HAS_WGET}" == "true" ]; then
      TAG=$(wget $latest_release_url -O - 2>&1 | grep tag_name | sed -E 's/.*"([^"]+)".*/\1/')
    fi
  else
    TAG=$DESIRED_VERSION
  fi
}

# checkHypperInstalledVersion checks which version of hypper is installed and
# if it needs to be changed.
checkHypperInstalledVersion() {
  if [[ -f "${HYPPER_INSTALL_DIR}/${BINARY_NAME}" ]]; then
    local version
    version=$("${HYPPER_INSTALL_DIR}/${BINARY_NAME}" version --template="{{ .Version }}")
    if [[ "$version" == "$TAG" ]]; then
      echo "hypper ${version} is already ${DESIRED_VERSION:-latest}"
      return 0
    else
      echo "hypper ${TAG} is available. Changing from version ${version}."
      return 1
    fi
  else
    return 1
  fi
}

# downloadFile downloads the latest binary package and also the checksum
# for that binary.
downloadFile() {
  HYPPER_DIST="hypper-$TAG-$OS-$ARCH.tar.gz"
  DOWNLOAD_URL="https://github.com/rancher-sandbox/hypper/releases/download/$TAG/$HYPPER_DIST"
  CHECKSUM_URL="https://github.com/rancher-sandbox/hypper/releases/download/$TAG/hypper-$TAG-checksums.txt"
  HYPPER_TMP_ROOT="$(mktemp -dt hypper-installer-XXXXXX)"
  HYPPER_TMP_FILE="$HYPPER_TMP_ROOT/$HYPPER_DIST"
  HYPPER_SUM_FILE="$HYPPER_TMP_ROOT/hypper-$TAG-checksums.txt"
  echo "Downloading $DOWNLOAD_URL"
  if [ "${HAS_CURL}" == "true" ]; then
    curl -SsL "$CHECKSUM_URL" -o "$HYPPER_SUM_FILE"
    curl -SsL "$DOWNLOAD_URL" -o "$HYPPER_TMP_FILE"
  elif [ "${HAS_WGET}" == "true" ]; then
    wget -q -O "$HYPPER_SUM_FILE" "$CHECKSUM_URL"
    wget -q -O "$HYPPER_TMP_FILE" "$DOWNLOAD_URL"
  fi
}

# verifyFile verifies the SHA256 checksum of the binary package
# (depending on settings in environment).
verifyFile() {
  if [ "${VERIFY_CHECKSUM}" == "true" ]; then
    verifyChecksum
  fi
}

# installFile installs the Hypper binary.
installFile() {
  HYPPER_TMP="$HYPPER_TMP_ROOT/$BINARY_NAME"
  mkdir -p "$HYPPER_TMP"
  tar xf "$HYPPER_TMP_FILE" -C "$HYPPER_TMP"
  HYPPER_TMP_BIN="$HYPPER_TMP/hypper"
  echo "Preparing to install $BINARY_NAME into ${HYPPER_INSTALL_DIR}"
  runAsRoot cp "$HYPPER_TMP_BIN" "$HYPPER_INSTALL_DIR/$BINARY_NAME"
  echo "$BINARY_NAME installed into $HYPPER_INSTALL_DIR/$BINARY_NAME"
}

# verifyChecksum verifies the SHA256 checksum of the binary package.
verifyChecksum() {
  printf "Verifying checksum... "
  local sum
  local expected_sum
  sum=$(openssl sha1 -sha256 "${HYPPER_TMP_FILE}" | awk '{print $2}')
  expected_sum=$(grep -i "${HYPPER_DIST}" "${HYPPER_SUM_FILE}" | cut -f 1 -d " ")
  if [ "$sum" != "$expected_sum" ]; then
    echo "SHA sum of ${HYPPER_TMP_FILE} does not match. Aborting."
    exit 1
  fi
  echo "Done."
}

# fail_trap is executed if an error occurs.
fail_trap() {
  result=$?
  if [ "$result" != "0" ]; then
    if [[ -n "$INPUT_ARGUMENTS" ]]; then
      echo "Failed to install $BINARY_NAME with the arguments provided: $INPUT_ARGUMENTS"
      help
    else
      echo "Failed to install $BINARY_NAME"
    fi
    echo -e "\tFor support, go to https://github.com/rancher-sandbox/hypper."
  fi
  cleanup
  exit $result
}

# testVersion tests the installed client to make sure it is working.
testVersion() {
  set +e
  _="$(command -v $BINARY_NAME)"
  if [ "$?" = "1" ]; then
    echo "$BINARY_NAME not found. Is $HYPPER_INSTALL_DIR on your \$PATH?"
    exit 1
  fi
  set -e
}

# help provides possible cli installation arguments
help () {
  echo "Accepted cli arguments are:"
  echo -e "\t[--help|-h ] ->> prints this help"
  echo -e "\t[--version|-v <desired_version>] . When not defined it fetches the latest release from GitHub"
  echo -e "\te.g. --version v1.0.0"
  echo -e "\t[--no-sudo]  ->> install without sudo"
}

cleanup() {
  if [[ -d "${HYPPER_TMP_ROOT:-}" ]]; then
    rm -rf "$HYPPER_TMP_ROOT"
  fi
}

# Execution

#Stop execution on any error
trap "fail_trap" EXIT
set -e

# Set debug if desired
if [ "${DEBUG}" == "true" ]; then
  set -x
fi

# Parsing input arguments (if any)
export INPUT_ARGUMENTS="${*}"
set -u
while [[ $# -gt 0 ]]; do
  case $1 in
    '--version'|-v)
       shift
       if [[ $# -ne 0 ]]; then
           export DESIRED_VERSION="${1}"
       else
           echo -e "Please provide the desired version. e.g. --version v1.0.0"
           exit 0
       fi
       ;;
    '--no-sudo')
       USE_SUDO="false"
       ;;
    '--help'|-h)
       help
       exit 0
       ;;
    *) exit 1
       ;;
  esac
  shift
done
set +u

initArch
initOS
verifySupported
checkDesiredVersion
if ! checkHypperInstalledVersion; then
  downloadFile
  verifyFile
  installFile
fi
testVersion
cleanup
